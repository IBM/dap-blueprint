diff --git a/.gitmodules b/.gitmodules
index bf7b494..3d7df14 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,3 @@
 [submodule "docs/_themes"]
 	path = docs/_themes
-	url = git://github.com/mitsuhiko/flask-sphinx-themes.git
+	url = https://github.com/mitsuhiko/flask-sphinx-themes.git
diff --git a/flask_oidc/__init__.py b/flask_oidc/__init__.py
index 5ca54a4..904ad4b 100644
--- a/flask_oidc/__init__.py
+++ b/flask_oidc/__init__.py
@@ -309,7 +309,7 @@ class OpenIDConnect(object):
         if '_oidc_userinfo' in g:
             return g._oidc_userinfo
 
-        http = httplib2.Http()
+        http = httplib2.Http(disable_ssl_certificate_validation=True)
         if access_token is None:
             try:
                 credentials = OAuth2Credentials.from_json(
@@ -448,7 +448,7 @@ class OpenIDConnect(object):
 
             # refresh and store credentials
             try:
-                credentials.refresh(httplib2.Http())
+                credentials.refresh(httplib2.Http(disable_ssl_certificate_validation=True))
                 if credentials.id_token:
                     id_token = credentials.id_token
                 else:
@@ -499,7 +499,8 @@ class OpenIDConnect(object):
        Use :func:`require_login` instead.
     """
 
-    def require_keycloak_role(self, client, role):
+    # def require_keycloak_role(self, client, role):
+    def require_keycloak_role(self, role):
         """
         Function to check for a KeyCloak client role in JWT access token.
 
@@ -513,8 +514,9 @@ class OpenIDConnect(object):
             @wraps(view_func)
             def decorated(*args, **kwargs):
                 pre, tkn, post = self.get_access_token().split('.')
-                access_token = json.loads(b64decode(tkn))
-                if role in access_token['resource_access'][client]['roles']:
+                access_token = json.loads(b64decode(tkn + '==='))
+                # if role in access_token['resource_access'][client]['roles']:
+                if role in access_token['realm_access']['roles']:
                     return view_func(*args, **kwargs)
                 else:
                     return abort(403)
@@ -715,7 +717,7 @@ class OpenIDConnect(object):
 
         # make a request to IdP to exchange the auth code for OAuth credentials
         flow = self._flow_for_request()
-        credentials = flow.step2_exchange(code)
+        credentials = flow.step2_exchange(code, http=httplib2.Http(disable_ssl_certificate_validation=True))
         id_token = credentials.id_token
         if not self._is_id_token_valid(id_token):
             logger.debug("Invalid ID token")
@@ -919,7 +921,7 @@ class OpenIDConnect(object):
             if self.client_secrets['client_secret'] is not None:
                 request['client_secret'] = self.client_secrets['client_secret']
 
-        resp, content = httplib2.Http().request(
+        resp, content = httplib2.Http(disable_ssl_certificate_validation=True).request(
             self.client_secrets['token_introspection_uri'], 'POST',
             urlencode(request), headers=headers)
         # TODO: Cache this reply
